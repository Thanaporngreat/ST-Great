const express = require('express');
const jwt = require('jsonwebtoken');
const User = require('../models/userModel'); // Import ‡πÇ‡∏°‡πÄ‡∏î‡∏• User
const router = express.Router();
const authenticateToken = require('./authmiddleware');
const db = require('../config/dbConfig');

// GET /me - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
router.get('/me', authenticateToken, async (req, res) => {
    try {
        // ‡πÉ‡∏ä‡πâ findById ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ô UserModel
        const user = await User.findById(req.userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        res.status(200).json({ user });
    } catch (error) {
        console.error('‚ùå Fetch User Error:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
router.put('/me', authenticateToken, async (req, res) => {
    const { full_name, birth_date, phone, email, password } = req.body;

    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å ID ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô Token
        const userId = req.userId;
        const user = await User.findById(userId);

        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà
        let hashedPassword = user.password; // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        if (password) {
            hashedPassword = await bcrypt.hash(password, 10);
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const updatedUser = await User.update(userId, { full_name, birth_date, phone, email, password: hashedPassword });

        res.status(200).json({
            message: 'User updated successfully!',
            user: updatedUser
        });
    } catch (error) {
        console.error('‚ùå Update User Error:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});

router.post('/save-fcm-token', async (req, res) => {
    const { userId, fcmToken, source } = req.body;
  
    try {
      if (userId) {
        await db.query('UPDATE users SET fcm_token = ? WHERE id = ?', [fcmToken, userId]);
      } else {
        // ‡πÄ‡∏Å‡πá‡∏ö token ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ log ‡πÑ‡∏ß‡πâ
        console.log(`üì• Received anonymous FCM Token from ${source || 'unknown'}`, fcmToken);
      }
  
      res.json({ message: 'Token saved successfully (or logged)' });
    } catch (err) {
      console.error('‚ùå Error saving FCM token:', err);
      res.status(500).json({ error: 'Database error' });
    }
  });

module.exports = router;